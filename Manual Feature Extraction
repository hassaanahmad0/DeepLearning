✅ circle_classification.py
import numpy as np
import cv2
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

# Create Circle Image
imgSize = 100
circleImg = np.zeros((imgSize, imgSize), dtype=np.uint8)
center = (imgSize // 2, imgSize // 2)
radius = 30
cv2.circle(circleImg, center, radius, 1, thickness=-1)

# Define Feature Extraction Functions
def calculate_area(img):
    return np.sum(img)

def calculate_perimeter(img):
    return np.sum(cv2.Canny(img, 100, 200) > 0)

def calculate_circularity(area, perimeter):
    return (4 * np.pi * area) / (perimeter ** 2) if perimeter != 0 else 0

# Extract Features
area = calculate_area(circleImg)
perimeter = calculate_perimeter(circleImg)
circularity = calculate_circularity(area, perimeter)

# Train k-NN
trainingData = np.array([[area, perimeter, circularity]])
trainingLabels = np.array([1])  # 1 = Circle
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(trainingData, trainingLabels)

# Test and Predict
testFeatures = np.array([[area, perimeter, circularity]])
predictedLabel = knn.predict(testFeatures)

print("The image contains a circle.") if predictedLabel == 1 else print("Unknown shape.")

✅ square_classification.py
import numpy as np
import cv2
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

# Create Square Image
imgSize = 100
squareImg = np.zeros((imgSize, imgSize), dtype=np.uint8)
squareImg[30:70, 30:70] = 1

# Define Feature Extraction Functions
def calculate_area(img):
    return np.sum(img)

def calculate_perimeter(img):
    return np.sum(cv2.Canny(img, 100, 200) > 0)

def calculate_circularity(area, perimeter):
    return (4 * np.pi * area) / (perimeter ** 2) if perimeter != 0 else 0

# Extract Features
area = calculate_area(squareImg)
perimeter = calculate_perimeter(squareImg)
circularity = calculate_circularity(area, perimeter)

# Train k-NN
trainingData = np.array([[area, perimeter, circularity]])
trainingLabels = np.array([2])  # 2 = Square
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(trainingData, trainingLabels)

# Test and Predict
testFeatures = np.array([[area, perimeter, circularity]])
predictedLabel = knn.predict(testFeatures)

print("The image contains a square.") if predictedLabel == 2 else print("Unknown shape.")


✅ triangle_classification.py
import numpy as np
import cv2
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier

# Create Triangle Image
imgSize = 100
triangleImg = np.zeros((imgSize, imgSize), dtype=np.uint8)
vertices = np.array([[50, 30], [30, 70], [70, 70]], dtype=np.int32)
cv2.fillPoly(triangleImg, [vertices], 1)

# Define Feature Extraction Functions
def calculate_area(img):
    return np.sum(img)

def calculate_perimeter(img):
    return np.sum(cv2.Canny(img, 100, 200) > 0)

def calculate_circularity(area, perimeter):
    return (4 * np.pi * area) / (perimeter ** 2) if perimeter != 0 else 0

# Extract Features
area = calculate_area(triangleImg)
perimeter = calculate_perimeter(triangleImg)
circularity = calculate_circularity(area, perimeter)

# Train k-NN
trainingData = np.array([[area, perimeter, circularity]])
trainingLabels = np.array([3])  # 3 = Triangle
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(trainingData, trainingLabels)

# Test and Predict
testFeatures = np.array([[area, perimeter, circularity]])
predictedLabel = knn.predict(testFeatures)

print("The image contains a triangle.") if predictedLabel == 3 else print("Unknown shape.")
